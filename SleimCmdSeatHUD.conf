name: SleimCmdHud_v1.6 Shield Display

slots:
    core:
        class: CoreUnit
    warpdrive:
        class: WarpDriveUnit
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    transponder:
        class: TransponderUnit
    switch:
        class: ManualSwitchUnit
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    

handlers:
    unit:
        onStart:
            lua: |
                showWeapons = true --export: Shows Weapon Widgets in 3rd person
                showShield = true --export: shows Shield Status
                showAllies = true --export: adds info about allies
                showThreats = true --export: adds info about Threats
                printSZContacts = false --export: print new Contacs in Safezone, default off
                printLocationOnContact = true --export: print own location on new target
                showTime = true --export: Shows Time when new Targets enter radar range or leave
                maxAllies = 10 --export: max Amount for detailed info about Allies, reduce if overlapping with threat info
                tempRadarTime = 200 --export: temporary Radar time in seconds until it gets destroyed
                probil = 0
                targetSpeed = 0
                oldSpeed = 0
                targetDistance = 0
                oldTargetDistance = 0
                targetName = "TargetInfo"
                speedChangeIcon = ""
                distanceChangeIcon = ""
                maxCoreStress = core.getMaxCoreStress()
                venting = ""
                stressBarHeight = "5"
                newRadarContacts = {}
                newRadarCounter = 0
                newTargetId = 0
                healthHtml = ""
                alliesHtml = ""
                threatsHtml = ""
                html = ""
                allies = {}
                threats = {}
                zone = construct.isInPvPZone()
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                drift = false
                pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                yawSpeedFactor = 1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                screenHeight = system.getScreenHeight()
                screenWidth = system.getScreenWidth()
                unit.hideWidget()
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, { 1000, 5000, 10000, 20000, 30000 })
                Nav.axisCommandManager:setTargetGroundAltitude(4)


                brakeToggle = true --export:

                if brakeToggle then
                    isBraking = true
                    brakeInput = 1
                else
                    isBraking = false
                    brakeInput = 0
                end

                alarm = false
                system.showHelper(0)

                function brakeTroogle()
                    if isBraking then
                        isBraking = false
                        brakeInput = 0
                    else
                        isBraking = true
                        brakeInput = brakeInput + 1
                        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                            local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                            if (math.abs(targetSpeed) > constants.epsilon) then
                                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -utils.sign(targetSpeed))
                            end
                        end
                    end
                end

                function hideWarpDrive()
                    if warpdrive ~= nil then
                        if warpdrive.getStatus() ~= 11 or warpdrive.getStatus() ~= 7 then
                            warpdrive.showWidget()
                        else
                            warpdrive.hideWidget()
                        end
                    end
                end

                atlas = require('atlas')

                planetList = {}
                for k, nextPlanet in pairs(atlas[0]) do
                    if nextPlanet.type[1] == "Planet" then
                        planetList[#planetList + 1] = nextPlanet
                        --system.print(nextPlanet.name[1])
                    end
                end

                function newGetClosestPipe(wp)
                    local pipeDistance
                    nearestDistance = nil
                    local nearestPipePlanet = nil
                    local pipeOriginPlanet = nil

                    for i = 1, #planetList, 1 do
                        for k = #planetList, i + 1, -1 do
                            originPlanet = planetList[i]
                            nextPlanet = planetList[k]
                            local distance = getPipeDistance(vec3(originPlanet.center), vec3(nextPlanet.center), wp)
                            if (nearestDistance == nil or distance < nearestDistance) then
                                nearestPipePlanet = nextPlanet
                                nearestDistance = distance
                                pipeOriginPlanet = originPlanet
                            end
                            --system.print(planetList[i].name[1].."-"..planetList[k].name[1])
                        end
                    end
                    pipeDistance = getDistanceDisplayString(nearestDistance)
                    return pipeOriginPlanet.name[1], nearestPipePlanet.name[1], pipeDistance
                end

                function round(num, numDecimalPlaces)
                    local mult = 10 ^ (numDecimalPlaces or 0)
                    return math.floor(num * mult + 0.5) / mult
                end

                function getDistanceDisplayString(distance)
                    local su = distance > 100000
                    if su then
                        -- Convert to SU
                        return round(distance / 1000 / 200, 2) .. "SU"
                    elseif distance < 1000 then
                        return round(distance, 2) .. "M"
                    else
                        -- Convert to KM
                        return round(distance / 1000, 2) .. "KM"
                    end
                end

                function getCurrentBody()
                    local coordinates = construct.getWorldPosition()
                    local minDistance2, body
                    local coord = vec3(coordinates)
                    for i, v in pairs(atlas[0]) do
                        local distance2 = (vec3(v.center) - coord):len2()
                        if (not body or distance2 < minDistance2) then -- Never return space.
                            body = v
                            minDistance2 = distance2
                        end
                    end
                    return body
                end

                function getPipeDistance(origCenter, destCenter, pos)
                    local pipeDistance
                    local worldPos = vec3(pos)
                    local pipe = (destCenter - origCenter):normalize()
                    local r = (worldPos - origCenter):dot(pipe) / pipe:dot(pipe)

                    if r <= 0. then
                        pipeDistance = (worldPos - origCenter):len()
                        return pipeDistance
                    elseif r >= (destCenter - origCenter):len() then
                        pipeDistance = (worldPos - destCenter):len()
                        return pipeDistance
                    else
                        local L = origCenter + (r * pipe)
                        pipeDistance = (L - worldPos):len()
                        return pipeDistance
                    end
                end

                function updatePipeInfo()
                    currentPos = construct.getWorldPosition()
                    local notPvPZone = construct.isInPvPZone() == 0
                    local pvpDist = construct.getDistanceToSafeZone()
                    if pvpDist < 0 then pvpDist = pvpDist * (-1) end

                    local o, p, d = newGetClosestPipe(currentPos)
                    return o, p, d, notPvPZone, pvpDist
                end

                function drawPipeInfo()
                    local zone = ""
                    local originPlanet, pipePlanet, pipeDist, notPvPZone, pvpDist = updatePipeInfo()
                    if notPvPZone then
                        zone = "PvP"
                    else
                        zone = "Safe"
                    end
                    pvpDist = getDistanceDisplayString(pvpDist)
                    pipeInfoHtml = [[
                                                    <style>
                                                        .pipeInfo{
                                                            position: fixed;
                                                            top: 10px;
                                                            left: 50%;
                                                            transform: translateX(-50%);
                                                            text-align: center;
                                                            margin-bottom: 20px;
                                                        }
                                                    </style>
                                                    <div class="pipeInfo">
                                                        <h1>]] .. originPlanet .. " - " .. pipePlanet .. [[: ]] .. pipeDist .. [[</h1>
                                                        <h2>]] .. zone .. [[ Zone in: ]] .. pvpDist .. [[<h2>
                                                    </div>
                                                    ]]
                end

                function drawFuelInfo()
                    local fuelCSS = [[<style>
                                    .fuelInfo {
                                        position: fixed;
                                        bottom: 40px;
                                        left: 28%;
                                        witdh: 200px;
                                    }
                                    .fuel-bar {
                                        text-align: center;
                                        background: #142027;
                                        color: white;
                                        font-family: "Lucida" Grande, sans-serif;
                                        font-size: 10px;
                                        border-radius: 5vh;
                                        border: 1px solid;
                                        border-color: #098dfe;
                                    }
                                    .barFullness {
                                        padding: 5px;
                                        border-radius: 5vh;
                                        height: 95%;
                                        position: center;
                                        text-align: left;
                                    }
                                    </style>]]

                    function addFuelTank(tank, i)
                        local color = "green"
                        local percent = json.decode(tank.getWidgetData()).percentage
                        if percent == nil then
                            percent = 0
                            color = "red"
                        elseif percent < 15 then
                            color = "red"
                        elseif percent < 50 then
                            color = "orange"
                        end
                        return [[
                                    <tr><td style="width:200px"><div class="fuel-bar">
                                            <div class="barFullness" style="width: ]] .. percent .. [[%;
                                        background:]] .. color .. [[;">]] .. percent .. [[%</div>
                                        </div></td></tr>
                                    ]]
                    end

                    fuelHtml = fuelCSS .. [[<table class="fuelInfo">
                                        ]]
                    if spacefueltank_size > 0 then
                        fuelHtml = fuelHtml .. [[<tr>
                                            <th>Space</th>
                                        </tr>]]
                    end
                    for i = 1, #spacefueltank do

                        fuelHtml = fuelHtml .. addFuelTank(spacefueltank[i], i)
                    end
                    if atmofueltank_size > 0 then
                        fuelHtml = fuelHtml .. [[<tr>
                                            <th>Atmo</th>
                                        </tr>]]
                    end

                    for i = 1, #atmofueltank do
                        fuelHtml = fuelHtml .. addFuelTank(atmofueltank[i], i)
                    end

                    if rocketfueltank_size > 0 then
                        fuelHtml = fuelHtml .. [[<tr>
                                            <th>Rocket</th>
                                        </tr>]]
                    end

                    for i = 1, #rocketfueltank do
                        fuelHtml = fuelHtml .. addFuelTank(rocketfueltank[i], i)
                    end
                    fuelHtml = fuelHtml .. "</table></div>"
                end

                function brakeHud()
                    if isBraking then
                        brakeHtml = [[
                                        <style>
                                        .brake{
                                            position: fixed;
                                            left: 50%;
                                            bottom: 25%;
                                            transform: translateX(-50%); 
                                            text-align: center;
                                            color: red;
                                            text-shadow: 2px 2px 2px black;
                                        }
                                        </style>
                                        <h1><div class="brake">Brake Engaged</div></h1>
                                    ]]
                    else
                        brakeHtml = ""
                    end
                end

                function speedInfo()
                    local throttle = math.floor(unit.getThrottle())
                    local speed = math.floor(vec3(construct.getWorldVelocity()):len() * 3.6)
                    local accel = math.floor((vec3(construct.getWorldAcceleration()):len() / 9.80665) * 10) / 10
                    local maxSpeed = math.floor(construct.getMaxSpeed() * 3.6)
                    local c = 100000000 / 3600
                    local m0 = construct.getMass()
                    local v0 = vec3(construct.getWorldVelocity())
                    local maxBrakeThrust = construct.getMaxBrake()
                    local time = 0.0
                    dis = 0.0
                    local v = v0:len()
                    if maxBrakeThrust > 0 then
                        while v > 1.0 do
                            time = time + 1
                            local m = m0 / (math.sqrt(1 - (v * v) / (c * c)))
                            local a = maxBrakeThrust / m
                            if v > a then
                                v = v - a --*1 sec
                                dis = dis + v + a / 2.0
                            elseif a ~= 0 then
                                local t = v / a
                                dis = dis + v * t + a * t * t / 2
                                v = v - a
                            end
                        end
                    end
                    local resString = ""
                    if dis > 100000 then
                        resString = resString .. string.format(math.floor((dis / 200000) * 10) / 10)
                        brakeText = "SU"
                    elseif dis > 1000 then
                        resString = resString .. string.format(math.floor((dis / 1000) * 10) / 10)
                        brakeText = "KM"
                    else
                        resString = resString .. string.format(math.floor(dis))
                        brakeText = "M"
                    end

                    driftInfo = ""
                    if drift then
                        driftInfo = [[<tr>
                        <td style="text-align: center;" colspan="2"><h6>Inertia-Dampening: Off</h6></td>
                    </tr>]]
                    end
                    speedHtml = [[
                                    <style>
                                        h1,h6{
                                        color: #80ffff;
                                        }
                                    table.speed{
                                        position: fixed;
                                        table-layout: fixed;
                                        left: 60%;
                                        bottom: 35%;
                                        border-spacing: 0 10px;
                                        border-collapse: separate;
                                        }
                                    table.speed td{
                                        width: 110px;
                                    }          
                                    </style>
                                        <table class="speed">
                                            <tr>
                                                <td style="text-align: right;"><h1>]] .. throttle .. [[</h1></td>
                                                <td>%</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: right;"><h1>]] .. speed .. [[</h1></td>
                                                <td>km/h <h6>(max ]] .. maxSpeed .. [[)</h6></td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: right;"><h1>]] .. accel .. [[</h1></td>
                                                <td>g</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: right;"><h1>]] .. resString .. [[</h1></td>
                                                <td>]] .. brakeText .. [[ Brake-Dist</td>
                                            </tr>]] .. driftInfo .. [[
                                        </table>]]
                end
                if shield then
                    counter = 1
                    dpmTable = {}
                    dps = "Calculating"
                    ttZ = 0
                    ttZString = "Calculating"
                    calculating = false
                    lastShield = shield.getShieldHitpoints()
                    adjustShield = false
                    autoAdjustShield = false --export: NOT RECOMMENDED! Will audo adjust every minute based on current stress
                    shieldDownColor = ""
                    ShieldRes = {}
                    ShieldDisplay = {}
                    function enemyDPS()
                        local incDmg = 0
                        local newShield = shield.getShieldHitpoints()
                        local diff = lastShield - newShield
                        dpmTable[counter] = diff
                        counter = counter + 1
                        lastShield = newShield
                        local dpmTableLenght = #dpmTable
                        for i = 1, dpmTableLenght do
                            incDmg = incDmg + dpmTable[i]
                        end
                        
                        if counter > 60 then
                            adjustShield = true
                            counter = 1
                        end
                        if autoAdjustShield then
                            autoAdjust()
                        end
                        if dpmTableLenght > 10 then
                            dps = incDmg/dpmTableLenght
                            if counter%5 == 0 then
                                ttZ = newShield/dps
                                if ttZ < 60 then
                                    shieldDownColor = "red"
                                elseif ttZ < 180 then
                                    shieldDownColor = "orange"
                                end
                                ttZString = "~"..seconds_to_clock(ttZ) 
                            elseif ttZ > 0 then
                                ttZ = ttZ - 1
                                ttZString = "~"..seconds_to_clock(ttZ) 
                            end
                            
                            dps = round(dps/1000,2).."k"                       
                        end
                        if incDmg < 1 and dpmTableLenght == 60 then
                            unit.stopTimer("dps")
                            dpmTable = {}
                            counter = 1
                            dps = "Calculating"
                            ttZ = 0
                            ttZString = "Calculating"
                            calculating = false
                        end
                    end

                    function autoAdjust()
                        if adjustShield then
                            adjustShield = false
                            local sRR = shield.getStressRatioRaw()
                            local tot = 0.5999
                            if sRR[1] == 0.0 and sRR[2] == 0.0 and sRR[3] == 0.0 and sRR[4] == 0.0 then return end
                            local setResist = shield.setResistances((tot*sRR[1]),(tot*sRR[2]),(tot*sRR[3]),(tot*sRR[4]))
                        end
                    end

                    function drawEnemyDPS()
                        local resistances = shield.getResistances()
                        local resCd = math.floor(shield.getResistancesCooldown())
                        local ventCd = math.floor(shield.getVentingCooldown())

                        local sRR = shield.getStressRatioRaw()
                        
                    
                    screenHeight = system.getScreenHeight()
                    screenWidth = system.getScreenWidth()
                    ShieldDisplay.startX = screenWidth * 0.17
                    ShieldDisplay.startY = screenHeight * 25/1080
                    ShieldDisplay.resFactorX = screenWidth / 1920
                    ShieldDisplay.resFactorY = screenHeight / 1080
                        --system.print(ShieldDisplay.resFactorX)

                    ShieldDisplay.totalWidth = 350 * ShieldDisplay.resFactorX
                    ShieldDisplay.totalHeight = 250 * ShieldDisplay.resFactorY
                        ShieldDisplay.resBarWidth = ShieldDisplay.totalWidth * 3/5
                        ShieldDisplay.barMargin = 25 * ShieldDisplay.resFactorY 
                            ShieldDisplay.textMargin = 20 * ShieldDisplay.resFactorY
                    ShieldDisplay.barStart = 60 * ShieldDisplay.resFactorY    
                        local resistances = shield.getResistances()
                        
                        
                        ShieldRes.maxPool = shield.getResistancesPool()
                    
                        if not leftAltPressed then
                            ShieldRes.currentPool = shield.getResistancesRemaining()
                        ShieldRes[1] = {resistances[1],"AM" , sRR[1]}
                        ShieldRes[2] = {resistances[2],"EM", sRR[2]}
                        ShieldRes[3] = {resistances[3],"KI", sRR[3]}
                        ShieldRes[4] = {resistances[4],"TH", sRR[4]}
                            
                            end
                        ShieldDisplay.setString = "Set"
                        if resCd > 0 then
                            ShieldDisplay.setString = resCd .. " s"
                        end
                        ShieldDisplay.ventString = "Vent"
                        if ventCd > 0 then
                            ShieldDisplay.ventString = ventCd .. " sec"
                        end
                        if (calculating and shield.isActive() == 1) or shield.isVenting() == 1 or ventCd > 0 or leftAltPressed then
                    ShieldDisplay.HTML = [[

                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;fill:white;stroke:#80ffff;font-weight:bold">

                        <rect x="]] .. ShieldDisplay.startX .. [[" y="]] .. ShieldDisplay.startY .. [[" rx="20" ry="20" width="]] .. ShieldDisplay.totalWidth .. [[" height="]] .. ShieldDisplay.totalHeight .. [[" style="stroke-width:2;fill-opacity:0"/>

                        <text x="]] .. ShieldDisplay.startX + 30 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.textMargin .. [[">Enemy DPS: ]]..dps..[[</text>
                        <text x="]] .. ShieldDisplay.startX + 30 .. [[" y="]] .. ShieldDisplay.startY + ShieldDisplay.textMargin * 2 .. [[" fill="]]..shieldDownColor..[[">Time till shield down: ]]..ttZString..[[</text>
                            <line x1="]] .. ShieldDisplay.startX + 10 ..  [[" y1="]] .. ShieldDisplay.startY + ShieldDisplay.barMargin * 2 .. [[" x2="]] ..ShieldDisplay.startX + ShieldDisplay.totalWidth - 10 ..  [[" y2="]] .. ShieldDisplay.startY + ShieldDisplay.barMargin * 2 .. [[" style="stroke-width:2" />
                        
                        <text x="]] .. ShieldDisplay.startX + 30 .. [[" y="]] .. ShieldDisplay.startY + ShieldDisplay.barMargin * 3 .. [[">Points left: ]]..math.floor(ShieldRes.currentPool*100) .."/".. math.floor(ShieldRes.maxPool*100) ..[[</text>

                        ]]

                        for i = 1, 4, 1 do
                            ShieldDisplay.HTML = ShieldDisplay.HTML .. [[<text x="]] .. ShieldDisplay.startX + 12 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * i + 8 .. [[" font-weight:"lighter" font-size="10">]]..ShieldRes[i][2]..[[</text>
                            <rect x="]] .. ShieldDisplay.startX + 30 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * i .. [[" rx="2" ry="2" width="]].. ShieldDisplay.resBarWidth*ShieldRes[i][1]/ShieldRes.maxPool ..[[" height="10" style="stroke-width:0;fill-opacity:0.8;fill:white" />
                            <rect x="]] .. ShieldDisplay.startX + 30 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * i .. [[" rx="2" ry="2" width="]]..ShieldDisplay.resBarWidth..[[" height="10" style="stroke-width:2;fill-opacity:0" />
                            
                            <rect x="]] .. ShieldDisplay.startX + ShieldDisplay.resBarWidth + 40 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * i .. [[" rx="2" ry="2" width="]].. (ShieldDisplay.totalWidth - ShieldDisplay.resBarWidth -60) *ShieldRes[i][3] ..[[" height="10" style="stroke-width:0;fill-opacity:0.8;fill:red" />
                            <rect x="]] .. ShieldDisplay.startX + ShieldDisplay.resBarWidth + 40 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * i .. [[" rx="2" ry="2" width="]].. (ShieldDisplay.totalWidth - ShieldDisplay.resBarWidth -60) ..[[" height="10" style="stroke-width:2;fill-opacity:0" />
                            
                            ]]
                        end
                        ShieldDisplay.HTML = ShieldDisplay.HTML .. [[
                        
                        <rect x="]] .. ShieldDisplay.startX + 30* ShieldDisplay.resFactorX ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 5 .. [[" rx="4" ry="4" width="]]..50* ShieldDisplay.resFactorX ..[[" height="40" style="fill:yellow;stroke-width:2;fill-opacity:0" />
                        <text x="]] .. ShieldDisplay.startX + 45* ShieldDisplay.resFactorX ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 6 .. [[" style="font-weight:bold">]]..ShieldDisplay.setString..[[</text>
                        
                            <rect x="]] .. ShieldDisplay.startX + 90 * ShieldDisplay.resFactorX ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 5 .. [[" rx="4" ry="4" width="]]..50* ShieldDisplay.resFactorX ..[[" height="40" style="fill:yellow;stroke-width:2;fill-opacity:0" />
                            <text x="]] .. ShieldDisplay.startX +  98 * ShieldDisplay.resFactorX ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 6 .. [[" style="font-weight:bold">Reset</text>
                        
                        <rect x="]] .. ShieldDisplay.startX + ShieldDisplay.resBarWidth + ShieldDisplay.textMargin * 2 ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 5 .. [[" rx="4" ry="4" width="]]..(ShieldDisplay.totalWidth - ShieldDisplay.resBarWidth -60) ..[[" height="40" style="fill:yellow;stroke-width:2;fill-opacity:0" />
                        <text x="]] .. ShieldDisplay.startX + ShieldDisplay.resBarWidth + ShieldDisplay.textMargin * 3  ..  [[" y="]] ..  ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 6 .. [[" style="font-weight:bold">]] .. ShieldDisplay.ventString .. [[</text>
                        
                        </svg>]]
                    
                        else
                            ShieldDisplay.HTML = ""
                        end
                    end
                    Max = shield.getMaxShieldHitpoints()
                    venting = ""
                    stressBarHeight = "5"
                    function drawShield()
                        shieldMax = shield.getMaxShieldHitpoints()
                        shieldHp = shield.getShieldHitpoints()
                        shieldPercent = shieldHp / shieldMax * 100
                        if shieldPercent == 100 then shieldPercent = "100"
                        else
                            shieldPercent = string.format('%0.2f', shieldPercent)
                        end
                        coreStressPercent = string.format('%0.2f', core.getCoreStressRatio() * 100)
                        local shieldHealthBar = [[
                                        <style>
                                        .health-bar {
                                            position: fixed;
                                            width: 13em; 
                                            padding: 1vh; 
                                            bottom: 5vh;
                                            left: 50%;
                                            transform: translateX(-50%);
                                            text-align: center;
                                            background: #142027;
                                            opacity: 0.8;
                                            color: white;
                                            font-family: "Lucida" Grande, sans-serif;
                                            font-size: 1.5em;
                                            border-radius: 5vh;
                                            border: 0.2vh solid;
                                            border-color: #098dfe;
                                        }
                                        .bar {
                                            padding: 5px;
                                            border-radius: 5vh;
                                            background: #09c3fe;
                                            opacity: 0.8;
                                            width: ]] .. shieldPercent .. [[%;
                                            height: 40px;
                                            position: relative;
                                        }


                                        </style>
                                        <html>
                                            <div class="health-bar">
                                                <div class="bar">]] .. venting .. shieldPercent .. [[%</div>
                                            </div>
                                        </html>
                                        ]]
                        local coreStressBar = [[
                                        <style>
                                        .stress-health-bar {
                                            position: fixed;
                                            width: 13em; 
                                            padding: 1vh; 
                                            bottom:]] .. stressBarHeight .. [[vh;
                                            left: 50%;
                                            transform: translateX(-50%);
                                            text-align: center;
                                            background: #142027;
                                            opacity: 0.8;
                                            color: white;
                                            font-family: "Lucida" Grande, sans-serif;
                                            font-size: 1.5em;
                                            border-radius: 5vh;
                                            border: 0.2vh solid;
                                            border-color: #a00000;
                                        }
                                        .stress-bar {
                                            padding: 5px;
                                            border-radius: 5vh;
                                            background: #ff0000;
                                            opacity: 0.8;  
                                            width: ]] .. coreStressPercent .. [[%;
                                            height: 40px;
                                            position: relative;
                                        }


                                        </style>
                                        <html>
                                            <div class="stress-health-bar">
                                                <div class="stress-bar">]] .. coreStressPercent .. [[%</div>
                                            </div>
                                        </html>
                                        ]]
                        if shield.isVenting() == 1 then
                            stressBarHeight = "15"
                            venting = "Venting "
                            healthHtml = coreStressBar .. shieldHealthBar
                        elseif shield.isActive() == 0 or shield.getShieldHitpoints() == 0 then
                            stressBarHeight = "5"
                            healthHtml = coreStressBar
                        else
                            stressBarHeight = "5"
                            venting = ""
                            healthHtml = shieldHealthBar
                        end
                    end
                end
                function seconds_to_clock(time_amount)
                    local start_seconds = time_amount
                    local start_minutes = math.modf(start_seconds / 60)
                    local seconds = start_seconds - start_minutes * 60
                    local start_hours = math.modf(start_minutes / 60)
                    local minutes = start_minutes - start_hours * 60
                    local start_days = math.modf(start_hours / 24)
                    local hours = start_hours - start_days * 24
                    if hours > 0 then
                        local wrapped_time = { h = hours, m = minutes, s = seconds }
                        return string.format('%02.f:%02.f:%02.f', wrapped_time.h, wrapped_time.m, wrapped_time.s)
                    else
                        local wrapped_time = { m = minutes, s = seconds }
                        return string.format('%02.f:%02.f', wrapped_time.m, wrapped_time.s)
                    end
                end

                

                planetAR = ""
                function drawPlanetsOnScreen()
                    screenHeight = system.getScreenHeight()
                    screenWidth = system.getScreenWidth()
                    if lshiftPressed then
                        planetAR = [[<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">]]
                        for _, v in pairs(planetList) do
                            local point = vec3(v.center)
                            local distance = (point - vec3(construct.getWorldPosition())):len()
                            local planetPosOnScreen = library.getPointOnScreen({ point['x'], point['y'], point['z'] })
                            local xP = screenWidth * planetPosOnScreen[1]
                            local yP = screenHeight * planetPosOnScreen[2]
                            local deth = 12
                            local su = (distance / 200 / 1000)
                            if su < 10 then
                                deth = 250 - 800 * (distance / 1000 / 200 / 40)
                            elseif su < 40 then

                                deth = 20
                            end
                            if xP > 0 and yP > 0 then
                                planetAR = planetAR ..
                                    [[<circle cx="]] ..
                                    xP ..
                                    [[" cy="]] ..
                                    yP ..
                                    [[" r="]] .. deth .. [[" stroke="orange" stroke-width="1" style="fill-opacity:0" /><text x="]] ..
                                    xP + deth ..
                                    [[" y="]] ..
                                    yP + deth .. [[" fill="#c7dcff">]] .. v.name[1] ..
                                    " " .. getDistanceDisplayString(distance) .. [[</text>]]
                            end
                        end
                        planetAR = planetAR .. "</svg>"
                    else
                        planetAR = ""
                    end
                end

                aliencores = { [1] = {
                    name = "Alpha",
                    pos = { 33946188.8008, 71382020.5906, 28850112.1181 }
                }, [2] = {
                    name = "Beta",
                    pos = { -145633811.1992, -10577969.4094, -739352.8819 }
                },
                    [3] = {
                        name = "Epsilon",
                        pos = { 48566188.8008, 19622030.5906, 101000112.1181 }
                    },
                    [4] = {
                        name = "Eta",
                        pos = { -73133811.1992, 18722030.5906, -93699887.8819 }
                    },
                    [5] = {
                        name = "Delta",
                        pos = { 13666188.8008, 1622030.5906, -46839887.8819 }
                    },
                    [6] = {
                        name = "Kappa",
                        pos = { -45533811.1992, -46877969.4094, -739352.8819 }
                    },
                    [7] = {
                        name = "Zeta",
                        pos = { 81766188.8008, 16912030.5906, 23860112.1181 }
                    },
                    [8] = {
                        name = "Theta",
                        pos = { 58166188.8008, -52377969.4094, -739352.8819 }
                    },
                    [9] = {
                        name = "Iota",
                        pos = { 966188.8008, -149277969.4094, -739352.8819 }
                    }, [10] = {
                        name = "Gamma",
                        pos = { -64333811.1992, 55522030.5906, -14399887.8819 }
                    },
                }

                alienAR = ""
                function drawAlienCores()
                    if lshiftPressed then
                        alienAR = ""
                        for _, v in pairs(aliencores) do
                            local point = vec3(v.pos)
                            local distance = (point - vec3(construct.getWorldPosition())):len()
                            local alienPosOnScreen = library.getPointOnScreen({ point['x'], point['y'], point['z'] })
                            local xP = screenWidth * alienPosOnScreen[1]
                            local yP = screenHeight * alienPosOnScreen[2]
                            if xP > 0 and yP > 0 then
                                alienAR = alienAR ..
                                    [[<div style="position: fixed;left: ]] ..
                                    xP .. [[px;top:]] .. yP .. [[px;"><svg height="30" width="15">
                                                <g>
                                                    <path style="fill:purple;" d="M8.472,0l-1.28,0.003c-2.02,0.256-3.679,1.104-4.671,2.386C1.685,3.47,1.36,4.78,1.553,6.283
                                                        c0.37,2.87,2.773,6.848,4.674,8.486c0.475,0.41,1.081,0.794,1.353,0.899c0.129,0.044,0.224,0.073,0.333,0.073
                                                        c0.11,0,0.217-0.031,0.319-0.091c1.234-0.603,2.438-1.88,3.788-4.02c0.936-1.485,2.032-3.454,2.2-5.495
                                                        C14.492,2.843,12.295,0.492,8.472,0z M8.435,0.69c3.431,0.447,5.337,2.462,5.097,5.391c-0.156,1.913-1.271,3.875-2.097,5.182
                                                        c-1.278,2.027-2.395,3.226-3.521,3.777c-0.005,0.002-0.009,0.004-0.012,0.005c-0.029-0.006-0.068-0.021-0.087-0.027
                                                        c-0.149-0.057-0.706-0.401-1.135-0.771c-1.771-1.525-4.095-5.375-4.44-8.052C2.07,4.879,2.348,3.741,3.068,2.812
                                                        c0.878-1.135,2.363-1.889,4.168-2.12L8.435,0.69z"/>
                                                    <path style="fill:purple;" d="M3.504,6.83C3.421,6.857,3.37,6.913,3.373,7.024c0.308,1.938,1.616,3.536,3.842,3.126
                                                        C7.002,8.019,5.745,6.933,3.504,6.83z"/>
                                                    <path style="fill:purple;" d="M8.778,10.215c2.196-0.125,3.61-1.379,3.776-3.319C10.321,6.727,8.55,7.923,8.778,10.215z"/>
                                                </g>
                                            </svg>]] .. v.name .. " " .. getDistanceDisplayString(distance) .. [[</div>]]
                            end
                        end
                    else
                        alienAR = ""
                    end
                end

                radar = radar_1
                if radar_size == 0 then
                    system.print("Connect a space radar and run config again!")
                    unit.exit()
                end
                if weapon_size == 0 then
                    system.print("No Weapons connected")
                    --unit.exit()
                end
                local kSkipCharSet = { ["O"] = true, ["Q"] = true, ["0"] = true }
                local kCharSet = {}

                local function addRangeToCharSet(a, b)
                    for i = a, b do
                        local c = string.char(i)
                        if not kSkipCharSet[c] then
                            kCharSet[#kCharSet + 1] = c
                        end
                    end
                end

                -- 0 - 9
                addRangeToCharSet(48, 57)
                -- A - Z
                addRangeToCharSet(65, 90)

                local kCharSetSize = #kCharSet

                local function getHash(x)
                    if x == nil then
                        return 0
                    end
                    x = ((x >> 16) ~ x) * 0x45d9f3b
                    x = ((x >> 16) ~ x) * 0x45d9f3b
                    x = (x >> 16) ~ x
                    if x < 0 then x = ~x end
                    return x
                end

                function getShortName(id)
                    local seed = getHash(id) % 8388593
                    local a = (seed * 653276) % 8388593
                    local b = (a * 653276) % 8388593
                    local c = (b * 653276) % 8388593
                    return kCharSet[a % kCharSetSize + 1] .. kCharSet[b % kCharSetSize + 1] .. kCharSet[c % kCharSetSize + 1]
                end

                function seconds_to_clock(time_amount)
                    local start_seconds = time_amount
                    local start_minutes = math.modf(start_seconds / 60)
                    local seconds = start_seconds - start_minutes * 60
                    local start_hours = math.modf(start_minutes / 60)
                    local minutes = start_minutes - start_hours * 60
                    local start_days = math.modf(start_hours / 24)
                    local hours = start_hours - start_days * 24
                    local wrapped_time = { h = hours, m = minutes, s = seconds }
                    if hours > 0 then
                        return string.format('%02.f:%02.f:%02.f', wrapped_time.h, wrapped_time.m, wrapped_time.s)
                    else
                        return string.format('%02.f:%02.f', wrapped_time.m, wrapped_time.s)
                    end
                end

                function WeaponWidgetCreate()
                    if type(weapon) == 'table' and #weapon > 0 then
                        local WeaponPanaelIdList = {}
                        for i = 1, #weapon do
                            if i % 2 ~= 0 then
                                table.insert(WeaponPanaelIdList, system.createWidgetPanel(''))
                            end
                            local WeaponWidgetDataId = weapon[i].getWidgetDataId()
                            local WeaponWidgetType = weapon[i].getWidgetType()
                            system.addDataToWidget(WeaponWidgetDataId,
                                system.createWidget(WeaponPanaelIdList[#WeaponPanaelIdList], WeaponWidgetType))
                        end
                    end
                end

                if showWeapons == true then
                    WeaponWidgetCreate()
                end

                function getFriendlyDetails(id)
                    owner = radar.getConstructOwnerEntity(id)
                    if owner.id and owner.isOrganization then
                        return system.getOrganization(owner.id).name
                    end
                    if owner.id and not owner.isOrganization then
                        return system.getPlayerName(owner.id)
                    end
                    return ""
                end

                function printNewRadarContacts()
                    if zone == 1 or printSZContacts then
                        local newTargetCounter = 0
                        for k, v in pairs(newRadarContacts) do
                            if newTargetCounter > 10 then
                                system.print("Didnt print all new Contacts to prevent overload!")
                                break
                            end
                            newTargetCounter = newTargetCounter + 1
                            newTargetName = "[" .. radar.getConstructCoreSize(v) ..
                                "]-" .. getShortName(v) .. "- " .. radar.getConstructName(v)
                            if showTime then
                                newTargetName = newTargetName .. ' - Time: ' .. seconds_to_clock(system.getArkTime())
                            end
                            if radar and radar.hasMatchingTransponder(v) == 1 then
                                newTargetName = newTargetName .. " - [Ally] Owner: " .. getFriendlyDetails(v)
                                if not borderActive then
                                    borderColor = "green"
                                    borderWidth = 200
                                    borderActive = true
                                    unit.setTimer("cleanBorder", 1)
                                end
                            elseif radar.isConstructAbandoned(v) == 1 then
                                newTargetName = newTargetName .. " - Abandoned"
                            else
                                system.playSound("contact.mp3")
                                if not borderActive then
                                    borderActive = true
                                    borderColor = "red"
                                    borderWidth = 200
                                    unit.setTimer("cleanBorder", 1)
                                end
                            end
                            system.print("New Target: " .. newTargetName)
                            if printLocationOnContact then
                                system.print(system.getWaypointFromPlayerPos())
                            end
                        end
                        newRadarContacts = {}
                    else
                        newRadarContacts = {}
                    end
                end

                function getMaxCorestress()
                    if maxCoreStress > 1000000 then
                        maxCoreStress = string.format('%0.3f', (maxCoreStress / 1000000)) .. "M"
                    elseif maxCoreStress > 1000 then
                        maxCoreStress = string.format('%0.2f', (maxCoreStress / 1000)) .. "k"
                    end
                    system.print("Max Core Stress: " .. maxCoreStress)
                end

                requiredTargets = {}
                function readRequiredValues()
                    if autoTargets then
                        requiredTargets = {}
                        local targets = require("Targets")
                        for _, v in pairs(targets) do
                            local id = v.shortid[1]
                            if id ~= targetCode then
                                requiredTargets[#requiredTargets + 1] = v.shortid[1]
                            end
                        end
                        package.loaded['Targets'] = nil

                        local transponders = require("Transponder")
                        local tablea = {}
                        local i = 1

                        for _, v in pairs(transponders) do
                            local transtag = v.transponder[1]
                            tablea[i] = v.transponder[1]
                            i = i + 1
                            transponder.setTags(tablea)
                        end
                        package.loaded['Transponder'] = nil
                    end
                end

                if pcall(require, "Transponder") and pcall(require, "Targets") and transponder then
                    unit.setTimer("loadRequired", 2)
                end
                specialRadarTargets = {}
                function updateRadar(match)
                    if radar_size > 1 then
                        if radar_1 == radar and radar_1.getOperationalState() == -1 then radar = radar_2 end
                        if radar_2 == radar and radar_2.getOperationalState() == -1 then radar = radar_1 end
                    end
                    allies = {}
                    threats = {}
                    specialRadarTargets = {}
                    local data = radar.getWidgetData()
                    if string.len(data) < 120000 then
                        local constructList = data:gmatch('({"constructId":".-%b{}.-})')
                        local list = {}
                        for str in constructList do
                            local id = tonumber(str:match('"constructId":"([%d]*)"'))
                            local tagged = radar.hasMatchingTransponder(id) == 0 and true or false
                            if radar and radar.hasMatchingTransponder(id) == 1 then
                                allies[#allies + 1] = id
                            end
                            if radar.getThreatRateFrom(id) > 1 then
                                threats[#threats + 1] = id
                            end
                            local ident = radar.isConstructIdentified(id) == 1
                            local randomid = getShortName(id)
                            str = string.gsub(str, 'name":"', 'name":"' .. randomid .. ' - ')
                            if match and tagged then
                                list[#list + 1] = str
                            elseif not match and not tagged then
                                list[#list + 1] = str
                            end
                            if targetCode == randomid then
                                table.insert(specialRadarTargets, 1, str)
                            end

                            for i = 1, #requiredTargets do
                                local requiredTarget = requiredTargets[i]

                                if requiredTarget == randomid then
                                    table.insert(specialRadarTargets, str)
                                end
                            end

                            if not specialRadar and #specialRadarTargets > 0 then
                                specialRadar = true
                                specialTargetRadar()
                            end

                        end
                        return '{"constructsList":[' .. table.concat(list, ',') .. '],' .. data:match('"elementId":".+')
                    end
                end

                radarOnlyEnemeies = true
                fm = 'Enemies'
                rf = ''
                FCS_locked = false
                local _data = updateRadar(radarOnlyEnemeies)

                local _panel = system.createWidgetPanel("RADAR")
                local _widget = system.createWidget(_panel, "value")
                radarFilter = system.createData('{"label":"Filter","' .. fm .. '' .. rf .. '","unit": ""}')
                system.addDataToWidget(radarFilter, _widget)
                local _widget = system.createWidget(_panel, "radar")
                radarData = system.createData(_data)
                system.addDataToWidget(radarData, _widget)

                specialRadar = false
                function specialTargetRadar()
                    local widgetTitel = "Targets"
                    if autoTargets then widgetTitel = widgetTitel .. " - AutoMode" end
                    specialTimer = 0
                    unit.setTimer("specialR", 0.1)
                    local data = radar.getWidgetData()
                    local _dataS = '{"constructsList":[' .. table.concat(specialRadarTargets, ',') .. '],' ..
                        data:match('"elementId":".+')
                    _panelS = system.createWidgetPanel(widgetTitel)
                    local _widgetS = system.createWidget(_panelS, "radar")
                    radarDataS = system.createData(_dataS)
                    system.addDataToWidget(radarDataS, _widgetS)
                end

                allyAmount = 0
                function getAlliedInfo()
                    local htmlAllies = ""
                    allyAmount = #allies
                    local tooMany = false
                    if allyAmount > maxAllies then tooMany = true end
                    for i = 1, #allies do
                        if i < (maxAllies + 1) then
                            local id = allies[i]
                            local allyShipInfo = "[" ..
                                radar.getConstructCoreSize(id) .. "]-" .. getShortName(id) .. "- " .. radar.getConstructName(id)
                            local owner = getFriendlyDetails(id)
                            htmlAllies = htmlAllies .. [[<tr>
                                                <td>]] .. allyShipInfo .. [[</td>
                                                <td>]] .. owner .. [[</td>
                                                </tr>]]
                        end
                    end
                    if tooMany then
                        htmlAllies = htmlAllies .. [[<tr>
                                                <td colspan="2">Plus ]] .. (allyAmount - maxAllies) .. [[ more allies</td>
                                                </tr>]]
                    end
                    return htmlAllies
                end

                function alliesHead()
                    if allyAmount == 0 then
                        return ""
                    else
                        local alliesHead = [[<tr>
                                    <th style="width:max-content;max-width:80%">ShipInfo</th>
                                    <th style="width:max-content;max-width:30%">Owner</th>
                                    </tr>]]
                        return alliesHead
                    end
                end

                function drawAlliesHtml()
                    alliesHtml = [[
                                    <html>
                                        <div class="allies">
                                        <table class="customTable">
                                            <thead>
                                                <h2>Targets: ]] .. (#radar.getConstructIds() - allyAmount) .. [[</h2><br>
                                                <h2>Allies: ]] .. allyAmount .. [[</h2><br>]] .. alliesHead() .. [[</thead>
                                            <tbody>]] .. getAlliedInfo() .. [[</tbody>
                                        </table></div>
                                    </html>]]
                end

                function drawThreatsHtml()
                    threatsAmount = #threats
                    function threatsHead()
                        if threatsAmount == 0 then
                            return ""
                        else
                            local threatsHead = [[
                                            <tr>
                                                <th style="width:max-content;max-width:80%">ShipInfo</th>
                                                <th style="width:max-content;max-width:50%">Threat Lvl</th>
                                            </tr>]]
                            return threatsHead
                        end
                    end

                    function getThreatsInfo()
                        local threatInfo = ""
                        for i = 1, threatsAmount do
                            local id = threats[i]
                            local threatDist = radar.getConstructDistance(id)

                            if threatDist < 1000 then
                                threatDist = string.format('%0.2f', threatDist) .. "m"
                            elseif threatDist < 100000 then
                                threatDist = string.format('%0.2f', threatDist / 1000) .. "km"
                            else
                                threatDist = string.format('%0.2f', threatDist / 200000) .. "su"
                            end
                            local threatShipInfo = "[" ..
                                radar.getConstructCoreSize(id) ..
                                "]-" .. getShortName(id) .. "- " .. radar.getConstructName(id) .. " - " .. threatDist
                            local threat = radar.getThreatRateFrom(id)
                            local threatRateString = { "None", "Identified", "Stopped shooting", "Threatened", "Attacked" }
                            local color = "red"
                            if threat == 1 or threat == 2 then
                                color = "orange"
                            end
                            threatInfo = threatInfo .. [[<tr style=color:]] .. color .. [[>
                                                    <td>]] .. threatShipInfo .. [[</td>
                                                    <td>]] .. threatRateString[threat] .. [[</td>
                                                    </tr>]]
                        end
                        return threatInfo
                    end

                    threatsHtml = [[
                                    <div class="locked">
                                        <table class="customTable">
                                            <thead>
                                                <h2 style="color:red;text-align:right">Threats: ]] ..
                        threatsAmount .. [[</h2><br>]] .. threatsHead() .. [[
                                                <tbody>]] .. getThreatsInfo() .. [[</tbody>
                                        </table>
                                    </div>]]
                end

                cssAllyLocked = [[<style>
                                    .allies {
                                        position: fixed;
                                        top: 25px;
                                        width: 15%;
                                        color: white;
                                    }
                                    .locked {
                                        position: fixed;
                                        top: 14%;
                                        right: 20px;
                                        width: 15%;
                                        color: red;
                                    }
                                    table.customTable {
                                        border-collapse: collapse;
                                        border-width: 2px;
                                        background: #142027;
                                        opacity: 0.8;
                                        font-family: "Lucida" Grande, sans-serif;
                                        font-size: 12px;
                                        border-radius: 5px;
                                        border: 0.2vh solid;
                                        border-color: #098dfe
                                    }

                                    table.customTable td, table.customTable th {
                                        border-width: 2px;
                                        border-color: #7EA8F8;
                                        border-style: solid;
                                        border-radius: 5px;
                                        padding: 5px;
                                    }
                                    .h2{
                                        font-family: "Lucida" Grande, sans-serif;
                                    }

                                    </style>]]

                ownShipId = construct.getId()
                ownShipName = construct.getName()
                own3Letter = getShortName(ownShipId)
                ownInfoHtml = [[
                                <style>
                                .ownShipInfo{
                                    font-family: "Lucida" Grande, sans-serif;
                                    position: fixed;
                                    bottom: 10px;
                                }
                                </style>
                                <div class="ownShipInfo">
                                    <h4>]] .. ownShipId .. " [" .. own3Letter .. "] " .. ownShipName .. [[<h4>
                                </div>
                                ]]

                if showAllies then
                    drawAlliesHtml()
                end
                borderWidth = 0
                borderColor = "red"
                borderActive = false
                function alarmBorder()
                    alarmStyles = [[<style>
                                .alarmBorder {
                                    width:100%;
                                    height:100%;
                                    box-shadow: 0 0 ]] .. borderWidth .. [[px 0px ]] .. borderColor .. [[ inset;
                                    }</style>
                                    <html class='alarmBorder'></html>]]
                end

                function comma_value(amount)
                    local formatted = amount
                    while true do
                        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
                        if (k == 0) then
                            break
                        end
                    end
                    return formatted
                end

                local enemyInfoDmg = "";
                dmgTable = {}
                local dmgDone = 0;
                local dmgDoneFormatted = "0";
                local dmgPercent = 0;

                function addDmgToTable(id, dmg)
                    if not calculating then
                        calculating = true
                        unit.setTimer("DPS", 1)
                    end
                    local prevDmg = dmgTable[id]
                    if prevDmg == nil then
                        dmgTable[id] = dmg
                    else
                        dmgTable[id] = prevDmg + dmg
                    end
                end

                counter = 1
                dpsTable = {}
                dps = "~"
                ttTenMil = 0
                ttTenMilString = "--:--"
                calculating = false
                lastDmgValue = 0
                function enemyDPS()
                    local incDmg = 0
                    local newDmgValue = dmgTable[radar.getTargetId()] or 0
                    local diff = newDmgValue - lastDmgValue
                    if diff < 0 then
                        unit.stopTimer("DPS")
                        dpsTable = {}
                        counter = 1
                        dps = "~"
                        ttTenMil = 0
                        ttTenMilString = "--:--"
                        calculating = false
                        lastDmgValue = 0
                    end
                    dpsTable[counter] = diff
                    counter = counter + 1
                    lastDmgValue = newDmgValue
                    local dpsTableLenght = #dpsTable
                    for i = 1, dpsTableLenght do
                        incDmg = incDmg + dpsTable[i]
                    end

                    if counter > 60 then
                        counter = 1
                    end
                    if dpsTableLenght > 10 then
                        dps = incDmg / dpsTableLenght
                        if counter % 5 == 0 then
                            ttTenMil = (10000000 - newDmgValue) / dps
                            ttTenMilString = "~" .. seconds_to_clock(ttTenMil)
                        elseif ttTenMil > 0 then
                            ttTenMil = ttTenMil - 1
                            ttTenMilString = "~" .. seconds_to_clock(ttTenMil)
                        end
                        if ttTenMil < 0 then ttTenMilString = "" end
                        dps = round(dps / 1000, 2) .. "k"
                    end
                    if incDmg < 1 and dpsTableLenght == 60 then
                        unit.stopTimer("DPS")
                        dpsTable = {}
                        counter = 1
                        dps = "~"
                        ttTenMil = 0
                        ttTenMilString = "--:--"
                        calculating = false
                        lastDmgValue = 0
                    end
                end

                function round(num, numDecimalPlaces)
                    local mult = 10 ^ (numDecimalPlaces or 0)
                    return math.floor(num * mult + 0.5) / mult
                end

                function getMaxSpeedByMass(m)
                    if m then
                    m = m / 1000
                    local speed = 50376.8 -62.5683*m+0.0659543*m^2-0.000036692*m^3+7.8824910^-9*m^4

                    if speed > 50000 then
                        speed = 50000
                    elseif speed < 20000 then
                        speed = 20000
                    end
                    return speed
                    end
                end

                function drawEnemyInfoDmgBar()
                    if weapon_1 then
                    local targetId = radar.getTargetId()

                    if targetId == 0 or radar.isConstructIdentified(targetId) == 0 then
                        enemyInfoDmg = "";
                    else

                        dmgDone = dmgTable[targetId] or 0;
                        dmgPercent = (dmgDone / 100000)
                        if dmgPercent > 100 then dmgPercent = 100 end
                        if dmgDone > 1000000 then
                            dmgDoneFormatted = string.format('%0.2f', (dmgDone / 1000000)) .. "M"
                        elseif dmgDone > 1000 then
                            dmgDoneFormatted = string.format('%0.2f', (dmgDone / 1000)) .. "k"
                        else
                            dmgDoneFormatted = "0"
                        end
                        targetDistance = math.floor(radar.getConstructDistance(targetId))
                        targetName = "[" ..
                            radar.getConstructCoreSize(targetId) .. "]-" ..
                            getShortName(targetId) .. "- " .. radar.getConstructName(targetId)
                        targetSpeed = math.floor(radar.getConstructSpeed(targetId) * 3.6)
                        if targetSpeed > oldSpeed then
                            speedChangeIcon = "↑"
                        elseif targetSpeed < oldSpeed then
                            speedChangeIcon = "↓"
                        else
                            speedChangeIcon = ""
                        end

                        if targetDistance > oldTargetDistance then
                            distanceChangeIcon = "↑"
                        elseif targetDistance < oldTargetDistance then
                            distanceChangeIcon = "↓"
                        else
                            distanceChangeIcon = ""
                        end
                        oldTargetDistance = targetDistance
                        oldSpeed = targetSpeed

                        if targetDistance < 1000 then
                            distanceUnit = "m"
                        elseif targetDistance < 100000 then
                            targetDistance = targetDistance / 1000
                            distanceUnit = "km"
                        else
                            targetDistance = targetDistance / 200000
                            distanceUnit = "su"
                        end
                        local maxSpeed = comma_value(math.floor(getMaxSpeedByMass(radar.getConstructMass(targetId))))
                        probil = round(weapon_1.getHitProbability(), 4) * 100
                        enemyInfoDmg = [[<style>
                                        .enemyInfoCss {
                                            position: fixed;
                                            top: 8%;
                                            left: 50%;
                                            transform: translateX(-50%);
                                            width: 500px;
                                            color: #80ffff;
                                        }
                                    
                                        .dmg-bar {
                                            background: #142027;
                                            color: white;
                                            font-size: 10px;
                                            border-radius: 5vh;
                                            border: 1px solid;
                                            border-color: #098dfe;
                                        }
                                    
                                        .dmgBarFullness {
                                            padding: 5px;
                                            border-radius: 5vh;
                                            height: 95%;
                                        }
                                    
                                        table.dmgBar {
                                            table-layout: fixed;
                                            border-spacing: 0 0px;
                                            border-collapse: separate;
                                        }
                                    
                                        table.dmgBar td {
                                            width: 110px;
                                        }
                                    </style>
                                    <div class="enemyInfoCss">
                                        <table class="dmgBar">
                                            <tr>
                                                <th colspan=5>*]] .. targetName .. [[*</th>
                                            </tr>

                                            <tr>
                                                <td colspan=5 style="padding: 0px;">
                                                    <div class="dmg-bar">
                                                        <div class="dmgBarFullness" style="width: ]] ..
                            dmgPercent .. [[%;background:darkred;text-align: right;">]] .. dmgDoneFormatted .. [[</div>
                                                    </div>
                                                </td>

                                            </tr>
                                            <tr style="font-size: 12px;padding: 0px;">
                                                <td colspan="2">0</td>
                                                <td style="text-align: center;">5mil</td>
                                                <td colspan="2" style="text-align: right;">10mil</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2"></td>
                                                <td style="text-align: center;font-size: 18px;">Hitchance</td>
                                                <td colspan="2"></td>

                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td colspan="3">
                                                    <div class="dmg-bar">
                                                        <div class="dmgBarFullness" style="width: ]] ..
                            probil .. [[%;background:gray;text-align: center;">
                                                            ]] .. probil .. [[%</div>
                                                    </div>
                                                </td>
                                                <td></td>

                                            </tr>
                                            <tr>
                                                <td style="text-align: right;">]] .. distanceChangeIcon .. " " .. round(targetDistance, 2) .. distanceUnit .. [[</td>
                                                <td style="text-align: right;">]] .. speedChangeIcon .." " .. comma_value(targetSpeed) ..  [[km/h / ~]]..maxSpeed..[[</td>
                                                <td></td>
                                                <td>]] .. dps .. [[ dps</td>
                                                <td>]] .. ttTenMilString .. [[</td>
                                            </tr>
                                        </table>
                                    </div>
                                                        ]]
                    end
                    end
                end

                screenHeight = system.getScreenHeight()
                screenWidth = system.getScreenWidth()
                function crossHair()
                    local l = targetDistance
                    if l < 100000 then l = 100000 end
                    local pcrossHair = vec3(construct.getWorldPosition()) + l * vec3(construct.getWorldForward())
                    local ocrossHair = library.getPointOnScreen({ pcrossHair['x'], pcrossHair['y'], pcrossHair['z'] })
                    local x = ocrossHair[1]
                    local y = ocrossHair[2]
                    if x > 0 and y > 0 then
                        return [[<div style="position: fixed;left: ]] ..
                            screenWidth * x ..
                            [[px;top:]] ..
                            screenHeight * y ..
                            [[px;width:15px;height:15px;"><svg viewBox="0 0 1024 1024" ><path fill="currentColor" d="M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"></path><path fill="currentColor" d="M512 96a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V128a32 32 0 0 1 32-32zm0 576a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V704a32 32 0 0 1 32-32zM96 512a32 32 0 0 1 32-32h192a32 32 0 0 1 0 64H128a32 32 0 0 1-32-32zm576 0a32 32 0 0 1 32-32h192a32 32 0 1 1 0 64H704a32 32 0 0 1-32-32z"></path></svg></div>]]
                    else
                        return ""
                    end 
                end

                alliesAR = ""
                function drawAlliesOnScreen()
                    if lshiftPressed then
                        alliesAR = [[<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">]]
                        for _, v in ipairs(allies) do
                            local point = vec3(radar.getConstructWorldPos(v))
                            local allyPosOnScreen = library.getPointOnScreen({ point['x'], point['y'], point['z'] })
                            local x = screenWidth * allyPosOnScreen[1]
                            local y = screenHeight * allyPosOnScreen[2]
                            if x > 0 and y > 0 then
                                alliesAR = alliesAR ..
                                    [[<circle cx="]] ..
                                    x ..
                                    [[" cy="]] ..
                                    y ..
                                    [[" r="5" stroke="green" stroke-width="2" style="fill-opacity:0" /><text x="]] ..
                                    x + 10 .. [[" y="]] .. y + 10 .. [[" fill="white">]] .. getFriendlyDetails(v) .. [[</text>]]
                            end
                        end
                        alliesAR = alliesAR .. "</svg>"
                    else
                        alliesAR = ""
                    end
                end
                enemyDPSHtml = ""
                function zeroConvertToWorldCoordinates(cl)
                    local q = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
                    local cm = '::pos{' .. q .. ',' .. q .. ',' .. q .. ',' .. q .. ',' .. q .. '}'
                    local cn, co, ci, cj, ch = string.match(cl, cm)
                    if cn == '0' and co == '0' then
                        return vec3(tonumber(ci), tonumber(cj), tonumber(ch))
                    end
                    cj = math.rad(cj)
                    ci = math.rad(ci)

                    local planet = atlas[tonumber(cn)][tonumber(co)]

                    local cp = math.cos(ci)
                    local cq = vec3(cp * math.cos(cj), cp * math.sin(cj), math.sin(ci))
                    return (vec3(planet.center) + (planet.radius + ch) * cq)
                end
                local hasCustomWaypoints, customWaypoints = pcall(require, "customWaypoints")
                if hasCustomWaypoints then
                    system.print("--------------")
                    system.print("Loaded ".. #customWaypoints .. " Custom Waypoints for AR:")
                    for _, v in pairs(customWaypoints) do
                        system.print(v.name)
                    end
                    system.print("--------------")
                end
                customWaypointsAR = ""
                function drawCustomWaypointsOnScreen()
                    if lshiftPressed and hasCustomWaypoints then
                        customWaypointsAR = [[<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">]]
                        for _, v in pairs(customWaypoints) do
                            local point = vec3(zeroConvertToWorldCoordinates(v.pos))
                            local distance = (point - vec3(construct.getWorldPosition())):len()
                            local customWaypointsPosOnScreen = library.getPointOnScreen({ point['x'], point['y'], point['z'] })
                            local x = screenWidth * customWaypointsPosOnScreen[1]
                            local y = screenHeight * customWaypointsPosOnScreen[2]
                            local color = v.color or "red"
                            if x > 0 and y > 0 then
                                customWaypointsAR = customWaypointsAR ..
                                    [[<rect x="]] ..
                                    x - 5 ..
                                    [[" y="]] ..
                                    y - 5 ..
                                    [[" rx="2" ry="2" stroke="]]..color..[[" width="10" height="10" stroke-width="2" style="fill-opacity:0" /><text x="]]..
                                    x + 10 .. [[" y="]] .. y + 10 .. [[" fill="white">]] .. v.name .. " " .. getDistanceDisplayString(distance)..[[</text>]]
                            end
                        end
                        customWaypointsAR = customWaypointsAR .. "</svg>"
                    else
                        customWaypointsAR = ""
                    end
                end
                mouseHtml = ""
                leftAltPressed = false
                function drawMouse()
                    if leftAltPressed then
                        local x = system.getMousePosX()
                        local y = system.getMousePosY()
                        mouseHtml = [[<svg  width="100%" height="100%" style="position: absolute;left:0%;top:0%;"><circle cx=]] ..
                            x .. [[ cy=]] .. y .. [[ r=2 stroke="red" stroke-width="3" fill="red"></svg>]]
                    else
                        mouseHtml = ""
                    end
                end
                function drawHud()
                    drawFuelInfo()
                    brakeHud()
                    speedInfo()
                    drawPipeInfo()
                    drawMouse()
                    if shield then
                        drawEnemyDPS()
                        drawShield()
                    end
                    html = alarmStyles ..
                        cssAllyLocked ..
                        healthHtml .. alliesHtml .. customWaypointsAR .. threatsHtml .. ownInfoHtml .. enemyInfoDmg .. crossHair() ..
                        alliesAR ..
                        alienAR .. planetAR .. fuelHtml .. brakeHtml .. speedHtml .. pipeInfoHtml .. ShieldDisplay.HTML .. mouseHtml
                    system.setScreen(html)
                end

                if switch_1 ~= nil then switch_1.activate() end
                getMaxCorestress()
                system.setScreen(html)
                system.showScreen(1)
                unit.setTimer("hud", 0.1)
                unit.setTimer("radar", 0.4)
                unit.setTimer("clean", 30)
    
        onStop:
            lua: |
                if switch_1 ~= nil then switch_1.deactivate() end
        onTimer:
            args: ["specialR"]
            lua: |
                if specialTimer > tempRadarTime and not autoTargets then
                    system.destroyWidgetPanel(_panelS)
                    specialRadarTargets={}
                    specialRadar = false
                    targetCode = nil
                    unit.stopTimer("specialR")
                else
                    specialTimer = specialTimer +1
                    local data = radar.getWidgetData()
                    local _dataS = '{"constructsList":['..table.concat(specialRadarTargets,',')..'],'..data:match('"elementId":".+')
                    system.updateData(radarDataS, _dataS) 
                end
        onTimer:
            args: ["loadRequired"]
            lua: readRequiredValues()
        onTimer:
            args: ["radar"]
            lua: |
                local _data = updateRadar(radarOnlyEnemeies)
                system.updateData(radarFilter, '{"label":"Filter","value":"'..fm..''..rf..'", "unit": ""}')
                system.updateData(radarData, _data)
                zone = construct.isInPvPZone()
                printNewRadarContacts()

        onTimer:
            args: ["DPS"]
            lua: |
                enemyDPS()
        onTimer:
            args: ["clean"]
            lua: |
                collectgarbage("collect")
        onTimer:
            args: ["cleanBorder"]
            lua: |
                unit.stopTimer("cleanBorder")
                borderActive = false
                borderWidth = 0
        onTimer:
            args: ["hud"]
            lua: |
                if showAllies then
                    drawAlliesHtml()
                end
                if showThreats then
                    drawThreatsHtml()
                end
                alarmBorder()
                drawEnemyInfoDmgBar()
                drawHud()
                hideWarpDrive()
    radar_1:
        onEnter(id):
            lua: |
                newRadarContacts[#newRadarContacts+1] = id
        onLeave(id):
            lua: |
                if zone == 1 or printSZContacts then
                    local leaveTargetName = "["..radar_1.getConstructCoreSize(id).."]-"..getShortName(id).."- "..radar_1.getConstructName(id)
                    if showTime then
                        leaveTargetName = leaveTargetName..' - Time: '..seconds_to_clock(system.getArkTime())
                    end
                    if vec3(construct.getWorldVelocity()):len() < 8400 then
                        system.print("Target left: "..leaveTargetName)
                        system.playSound("targetleft.mp3")
                    end
                    
                end
    radar_2:
        onEnter(id):
            lua: |
                newRadarContacts[#newRadarContacts+1] = id
        onLeave(id):
            lua: |
                if zone == 1 or printSZContacts then
                    local leaveTargetName = "["..radar_2.getConstructCoreSize(id).."]-"..getShortName(id).."- "..radar_2.getConstructName(id)
                    if showTime then
                        leaveTargetName = leaveTargetName..' - Time: '..seconds_to_clock(system.getArkTime())
                    end
                    if vec3(construct.getWorldVelocity()):len() < 8400 then
                        system.print("Target left: "..leaveTargetName)
                        system.playSound("targetleft.mp3")
                    end
                end
    weapon_1:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)
    weapon_2:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)
    weapon_3:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)
    weapon_4:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)
    weapon_5:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)
    weapon_6:
        onHit(targetId,damage):
            lua: |
                addDmgToTable(targetId,damage)

    shield:
        onAbsorbed(hitpoints,rawHitpoints):
            lua: |
                if not calculating then
                    calculating = true
                    unit.setTimer("dps",1)
                end
        onVenting(active,restoredHitpoints):
            lua: |
                lastShield = shield.getShieldHitpoints()             
        
    system:
        onFlush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(construct.getWorldOrientationUp())
                local constructForward = vec3(construct.getWorldOrientationForward())
                local constructRight = vec3(construct.getWorldOrientationRight())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we dont go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')      
        
        onUpdate:
            lua: |
                Nav:update()
                drawPlanetsOnScreen()
                drawAlienCores()
                drawAlliesOnScreen()
                drawCustomWaypointsOnScreen()

        onActionStart:
            args: [groundaltitudedown]
            lua: |
                radarOnlyEnemeies = not radarOnlyEnemeies
                if radarOnlyEnemeies then
                    fm = 'Enemies'
                else
                    fm = 'Friends'
                end
        onInputText(text):
            lua: |
                system.print("Searching for: "..string.upper(text))
                targetCode = string.upper(text)
        onActionStart:
            args: [option5]
            lua: |
                autoTargets = not autoTargets
                if not autoTargets then
                    unit.stopTimer("specialR")
                    requiredTargets = {}
                    system.destroyWidgetPanel(_panelS)
                    specialRadarTargets={}
                    specialRadar = false
                    targetCode = nil
                end
        onActionStart:
            args: [lshift]
            lua: |
                lshiftPressed = not lshiftPressed
        onActionStart:
            args: [option1]
            lua: |
                if shield then shield.toggle() end
        onActionStart:
            args: [option2]
            lua: |
                if shield and shield.isVenting() == 0 and shield.getShieldHitpoints() < shield.getMaxShieldHitpoints() then
                    local started = shield.startVenting()
                    if started == 1 then
                        unit.stopTimer("dps")
                        dpmTable = {}
                        counter = 1
                        dps = "Calculating"
                        ttZ = 0
                        ttZString = "Calculating"
                        calculating = false
                    end
                elseif shield then
                    shield.stopVenting()
                end

        onActionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        onActionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        onActionStart:
            args: [forward]
            lua: |
                pitchInput = pitchInput - 1
        onActionStop:
            args: [forward]
            lua: if not drift then pitchInput = 0 end
        onActionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        onActionStop:
            args: [backward]
            lua: if not drift then pitchInput = 0 end
        onActionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        onActionStop:
            args: [left]
            lua: if not drift then rollInput = rollInput + 1 end
        onActionStart:
            args: [right]
            lua: |
                rollInput = rollInput + 1
        onActionStop:
            args: [right]
            lua: if not drift then rollInput = 0 end

        onActionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        onActionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        onActionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        onActionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        onActionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        onActionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        onActionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        onActionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        onActionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        onActionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        onActionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        onActionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        onActionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        onActionStop:
            args: [yawright]
            lua: if not drift then yawInput = 0 end
                
        onActionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        onActionStop:
            args: [yawleft]
            lua: if not drift then yawInput = 0 end
        onActionStart:
            args: [brake]
            lua: |
                if brakeToggle then brakeTroogle() else 
                    brakeInput = 1 
                    isBraking = true
                end
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        onActionStop:
            args: [brake]
            lua: |
                if not brakeToggle then
                    brakeInput = 0 
                    isBraking = false
                end

        onActionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        onActionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        onActionStart:
            args: [stopengines]
            lua: |
                if unit.getThrottle() > 0 then
                    Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
                else
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                end
        onActionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        onActionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        onActionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        onActionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        onActionStart:
            args: [antigravity]
            lua: |
                drift = not drift
                local driftFactor = 0.02 --export:
                if drift then
                    yawSpeedFactor = driftFactor
                    pitchSpeedFactor = driftFactor
                    rollSpeedFactor = driftFactor
                else
                    pitchInput = 0
                    rollInput = 0
                    yawInput = 0
                    yawSpeedFactor = 0.8
                    pitchSpeedFactor = 1
                    rollSpeedFactor = 1.5
                end
        onActionStart:
            args: [option3]
            lua: |
                brakeToggle = not brakeToggle
        onActionStart:
            args: [lalt]
            lua: |
                leftAltPressed = true
                system.lockView(true)
        onActionStop:
            args: [lalt]
            lua: |
                leftAltPressed = false
                system.lockView(false)
        onActionStart:
            args: [leftmouse]
            lua: |
                local x = system.getMousePosX()
                local y = system.getMousePosY()
                if x > ShieldDisplay.startX and x < ShieldDisplay.startX + ShieldDisplay.totalWidth and leftAltPressed then
                    local xClicked = round((x - ShieldDisplay.startX - 30) / (ShieldDisplay.resBarWidth) * ShieldRes.maxPool, 2)
                    if xClicked < 0 then xClicked = 0 end

                    -- AM bar
                    if y > ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin and
                        y < ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin + 10 then

                        local remaining = ShieldRes.maxPool - (ShieldRes[2][1] + ShieldRes[3][1] + ShieldRes[4][1])
                        if xClicked <= remaining then
                            ShieldRes[1][1] = xClicked
                        else
                            ShieldRes[1][1] = remaining
                        end

                    end

                    -- EM bar
                    if y > ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 2 and
                        y < ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 2 + 10 then

                        local remaining = ShieldRes.maxPool - (ShieldRes[1][1] + ShieldRes[3][1] + ShieldRes[4][1])
                        if xClicked <= remaining then
                            ShieldRes[2][1] = xClicked
                        else
                            ShieldRes[2][1] = remaining
                        end
                    end

                    -- KI bar
                    if y > ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 3 and
                        y < ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 3 + 10 then
                        local remaining = ShieldRes.maxPool - (ShieldRes[1][1] + ShieldRes[2][1] + ShieldRes[4][1])
                        if xClicked <= remaining then
                            ShieldRes[3][1] = xClicked
                        else
                            ShieldRes[3][1] = remaining
                        end
                    end

                    -- TH bar
                    if y > ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 4 and
                        y < ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 4 + 10 then
                        local remaining = ShieldRes.maxPool - (ShieldRes[1][1] + ShieldRes[2][1] + ShieldRes[3][1])
                        if xClicked <= remaining then
                            ShieldRes[4][1] = xClicked
                        else
                            ShieldRes[4][1] = remaining
                        end
                    end

                    -- buttons
                    if y > ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 5 and
                        y < ShieldDisplay.startY + ShieldDisplay.barStart + ShieldDisplay.barMargin * 5 + 40 then

                        -- Set Button
                        if x > ShieldDisplay.startX + 30 * ShieldDisplay.resFactorX and
                            x < ShieldDisplay.startX + 30 * ShieldDisplay.resFactorX + 50 * ShieldDisplay.resFactorX then
                            local currentRes = shield.getResistances()
                            if not
                                (
                                currentRes[1] == ShieldRes[1][1] and currentRes[2] == ShieldRes[2][1] and
                                    currentRes[3] == ShieldRes[3][1] and
                                    currentRes[4] == ShieldRes[4][1]) then
                                local setWorked = shield.setResistances(ShieldRes[1][1], ShieldRes[2][1], ShieldRes[3][1],
                                    ShieldRes[4][1])
                                if setWorked == 0 then system.print("Failed to set Resistances") end
                            end
                        end

                        -- Reset
                        if x > ShieldDisplay.startX + 90 * ShieldDisplay.resFactorX and
                            x < ShieldDisplay.startX + 90 * ShieldDisplay.resFactorX + 50 * ShieldDisplay.resFactorX then
                            for i = 1, 4, 1 do
                                ShieldRes[i][1] = 0
                            end
                        end

                        -- Vent
                        if x > ShieldDisplay.startX + ShieldDisplay.resBarWidth + ShieldDisplay.textMargin * 2 and
                            x <
                            ShieldDisplay.startX + ShieldDisplay.resBarWidth + ShieldDisplay.textMargin * 2 +
                            80 * ShieldDisplay.resFactorX then
                            if shield.isVenting() == 0 and shield.getShieldHitpoints() < shield.getMaxShieldHitpoints() then
                                local started = shield.startVenting()
                                if started == 1 then
                                    unit.stopTimer("dps")
                                    dpmTable = {}
                                    counter = 1
                                    dps = "Calculating"
                                    ttZ = 0
                                    ttZString = "Calculating"
                                    calculating = false
                                end
                            else
                                shield.stopVenting()
                            end
                        end
                    end

                    local used = ShieldRes[1][1] + ShieldRes[2][1] + ShieldRes[3][1] + ShieldRes[4][1]

                    if math.floor(ShieldRes.maxPool * 100) == math.floor(used * 100) then ShieldRes.currentPool = 0 else
                        ShieldRes.currentPool = ShieldRes.maxPool - used
                    end
                end